package main

import (
  "encoding/json"
  "log"
  "net/http"
  "math/rand"
  "strconv"
  "github.com/gorilla/mux"
  "bytes"
  "fmt"

  "image"
  "image/jpeg" // Register JPEG format


	"os"
)
//Book struct (Model)
 type Book struct {
   ID string `json:"id"`
   Isbn string `json:"isbn"`
   Title string `json:"title"`
   Author *Author `json:"author"`
 }

 //Author struct
 type  Author struct {
   Firstname string `json:"firstname"`
   Lastname string `json:"lastname"`
 }

 // Init books var as a slice Book struct
 var books []Book

// Get All Books
 func getBooks(w http.ResponseWriter, r *http.Request) {
   w.Header().Set("Content-Type", "application/json")
   json.NewEncoder(w).Encode(books)

  }

  //Get Single Book
   func getBook(w http.ResponseWriter, r *http.Request) {
     w.Header().Set("Content-Type", "application/json")
     params := mux.Vars(r) // get params
     // Loop through books and find with id
     for _, item := range books {
       if item.ID == params["id"] {
         json.NewEncoder(w).Encode(item)
         return
       }
     }
     json.NewEncoder(w).Encode(&Book{})

    }
// Create Book
  func createBook(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-Type", "application/json")
    var book Book
    _ = json.NewDecoder(r.Body).Decode(&book)
    book.ID = strconv.Itoa(rand.Intn(10000000)) // Mock ID - not safe
    books = append(books, book)
    json.NewEncoder(w).Encode(book)


   }
//
  func updateBook(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-Type", "application/json")
    params := mux.Vars(r)
    for index, item := range books {
      if item.ID == params["id"] {
        books = append(books[:index], books[index+1:]...)
        var book Book
        _ = json.NewDecoder(r.Body).Decode(&book)
        book.ID = params["id"] // Mock ID - not safe
        books = append(books, book)
        json.NewEncoder(w).Encode(book)
        return
      }
    }
    json.NewEncoder(w).Encode(books)


  }
  //
  func deleteBook(w http.ResponseWriter, r *http.Request) {
    w.Header().Set("Content-Type", "application/json")
    params := mux.Vars(r)
    for index, item := range books {
      if item.ID == params["id"] {
        books = append(books[:index], books[index+1:]...)
        break
      }
    }
    json.NewEncoder(w).Encode(books)


   }


   func blueHandler(w http.ResponseWriter, r *http.Request) {
     infile, err := os.Open("test.jpg")
     fmt.Println("asdasdasd")
     if err != nil {
       fmt.Println("sda")
     }
     defer infile.Close()
     src, _, err := image.Decode(infile)
     if err != nil {
       fmt.Println("sda")
     }
     fmt.Println(src)
   	 writeImage(w, &src)
   }

   func writeImage(w http.ResponseWriter, img *image.Image) {

   	buffer := new(bytes.Buffer)
   	if err := jpeg.Encode(buffer, *img, nil); err != nil {
   		log.Println("unable to encode image.")
   	}

   	w.Header().Set("Content-Type", "image/jpeg")
   	w.Header().Set("Content-Length", strconv.Itoa(len(buffer.Bytes())))
   	if _, err := w.Write(buffer.Bytes()); err != nil {
   		log.Println("unable to write image.")
   	}
   }

  func main() {
  //init Router
  r := mux.NewRouter()

  // Mock Data - @todo - implement DB
  books = append(books, Book{ID: "1", Isbn : "448233", Title : "Book One", Author : &Author{Firstname: "John", Lastname : "Doe"}})
  books = append(books, Book{ID: "2", Isbn : "232376", Title : "Topu", Author : &Author{Firstname: "Ritik", Lastname : "Verma"}})


  //Route Handlers / Endpoints
  r.HandleFunc("/api/books", getBooks).Methods("GET")
  r.HandleFunc("/api/books/{id}", getBook).Methods("GET")
  r.HandleFunc("/api/books", createBook).Methods("POST")
  r.HandleFunc("/api/books/{id}", updateBook).Methods("PUT")
  r.HandleFunc("/api/books/{id}", deleteBook).Methods("DELETE")
  r.HandleFunc("/api/blue/", blueHandler).Methods("GET")

  log.Fatal(http.ListenAndServe(":8000", r))



}
